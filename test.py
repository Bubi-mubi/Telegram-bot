from email.mime import text
import re
import requests
from datetime import datetime
import telebot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äì –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—Ç–µ —Ç–æ–∫–µ–Ω–∏/–∫–ª—é—á–æ–≤–µ
import os

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AIRTABLE_PERSONAL_ACCESS_TOKEN = os.getenv("AIRTABLE_PERSONAL_ACCESS_TOKEN")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")  # ID –Ω–∞ Airtable –±–∞–∑–∞—Ç–∞
TABLE_ACCOUNTS = "–í–°–ò–ß–ö–ò –ê–ö–ê–£–ù–¢–ò"
TABLE_REPORTS = "–û—Ç—á–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º"

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ URL –∏ headers –∑–∞ Airtable API
url_accounts = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ACCOUNTS}"
url_reports = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_REPORTS}"
headers = {
    "Authorization": f"Bearer {AIRTABLE_PERSONAL_ACCESS_TOKEN}",
    "Content-Type": "application/json"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Telegram –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
user_records = {}

user_pending_type = {}

# –°–ª–æ–≤–∞—Ä –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
user_editing = {}

def normalize_text(text):
    """–ü—Ä–∏–≤–µ–∂–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏ –∏ –ø—Ä–µ–º–∞—Ö–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏."""
    text = text.lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏
    text = re.sub(r'[^a-z–∞-—è0-9\s]', '', text)  # –ü—Ä–µ–º–∞—Ö–≤–∞ –≤—Å–∏—á–∫–∏ —Å–∏–º–≤–æ–ª–∏, —Ä–∞–∑–ª–∏—á–Ω–∏ –æ—Ç –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏
    return text

def find_account(account_name):
    """–¢—ä—Ä—Å–∏ –∞–∫–∞—É–Ω—Ç –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≥–æ–ª–µ–º–∏/–º–∞–ª–∫–∏ –±—É–∫–≤–∏ –∏ —Ç–∏—Ä–µ—Ç–∞."""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
    normalized_account_name = normalize_text(account_name)

    # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è –∞–∫–∞—É–Ω—Ç –Ω–∞ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    search_terms = normalized_account_name.strip().split()

    # –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ filterByFormula —Å AND –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    conditions = [f'SEARCH("{term}", LOWER({{REG}})) > 0' for term in search_terms]
    formula = f'AND({",".join(conditions)})'
    params = {"filterByFormula": formula}

    # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞ –∫—ä–º Airtable API
    res = requests.get(url_accounts, headers=headers, params=params)
    if res.status_code == 200:
        data = res.json()
        records = data.get("records", [])
        if len(records) > 0:
            account_id = records[0]["id"]  # –í–∑–µ–º–∞–º–µ ID –Ω–∞ –ø—ä—Ä–≤–∏—è —Å—ä–≤–ø–∞–¥–Ω–∞–ª –∞–∫–∞—É–Ω—Ç
            return account_id
    return None

def parse_transaction(text):
    """
    –ü–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∏–¥–∞ "<—Å—É–º–∞> <–≤–∞–ª—É—Ç–∞> –∑–∞ <–æ–ø–∏—Å–∞–Ω–∏–µ> –æ—Ç <–∞–∫–∞—É–Ω—Ç>".
    –í—Ä—ä—â–∞ –∫–æ—Ä—Ç–µ–∂ (amount, currency_code, description, account_name, is_expense).
    """
    text = text.strip()

    # –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–∏—Ü–∞ –∑–∞ "–∑–∞" –∏ "–æ—Ç"
    text = text.replace('za', '–∑–∞').replace('ot', '–æ—Ç')

    amount = None
    currency_code = None
    description = ""
    account_name = None
    is_expense = False  # –§–ª–∞–≥, –∫–æ–π—Ç–æ –ø–æ–∫–∞–∑–≤–∞ –¥–∞–ª–∏ –µ —Ä–∞–∑—Ö–æ–¥

    # –û—Ç–¥–µ–ª—è–Ω–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –∞–∫–∞—É–Ω—Ç–∞ (–∞–∫–æ –∏–º–∞ "–æ—Ç ..." –∏–ª–∏ "from ...")
    pre_acc = text
    if re.search(r'(?i)\b–æ—Ç\b', text):
        parts = text.rsplit(" –æ—Ç ", 1)
        pre_acc = parts[0].strip()
        account_name = parts[1].strip() if len(parts) > 1 else ""
    elif re.search(r'(?i)\bfrom\b', text):
        parts = text.rsplit(" from ", 1)
        pre_acc = parts[0].strip()
        account_name = parts[1].strip() if len(parts) > 1 else ""

    # –û—Ç–¥–µ–ª—è–Ω–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ (–∞–∫–æ –∏–º–∞ "–∑–∞ ..." –∏–ª–∏ "for ...")
    amount_currency_segment = pre_acc
    if re.search(r'(?i)\b–∑–∞\b', pre_acc):
        parts = pre_acc.split(" –∑–∞ ", 1)  # —Ä–∞–∑–¥–µ–ª—è —Å–∞–º–æ –ø—Ä–∏ –ø—ä—Ä–≤–æ—Ç–æ —Å—Ä–µ—â–∞–Ω–µ –Ω–∞ "–∑–∞"
        amount_currency_segment = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""
    elif re.search(r'(?i)\bfor\b', pre_acc):
        parts = pre_acc.split(" for ", 1)
        amount_currency_segment = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""

    # –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥ –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥
    if re.search(r'(?i)\brazhod\b', description) or re.search(r'(?i)\bplateno\b', description):
        is_expense = True
    elif re.search(r'(?i)\bprihod\b', description) or re.search(r'(?i)\bpostuplenie\b', description):
        is_expense = False

    # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ –æ—Ç –ø—ä—Ä–≤–∏—è —Å–µ–≥–º–µ–Ω—Ç (–Ω–∞–ø—Ä. "100 –ª–≤." –∏–ª–∏ "250 EUR")
    amount_str = ""
    currency_str = ""
    parts = amount_currency_segment.replace(",", ".").split()
    if len(parts) >= 2:
        amount_str = parts[0]
        currency_str = parts[1]
    else:
        m = re.match(r'^(\d+(?:\.\d+)?)(\D+)$', amount_currency_segment.replace(",", "."))
        if m:
            amount_str = m.group(1)
            currency_str = m.group(2)

    amount_str = amount_str.strip()
    currency_str = currency_str.strip().rstrip(".")
    if currency_str:
        cs = currency_str.lower()
        # –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∏ —Å –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–∏—Ü–∞
        if cs in ("–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"):
            currency_code = "BGN"
        elif cs in ("eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"):
            currency_code = "EUR"
        elif cs in ("gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"):
            currency_code = "GBP"

    if amount_str:
        try:
            amount = float(amount_str)
        except ValueError:
            amount = None

    # –ê–∫–æ –µ —Ä–∞–∑—Ö–æ–¥, –ø–æ—Å—Ç–∞–≤—è–º–µ –∑–Ω–∞–∫ –º–∏–Ω—É—Å –ø—Ä–µ–¥ —Å—É–º–∞—Ç–∞
    if is_expense and amount is not None:
        amount = -amount

    return amount, currency_code, description, account_name, is_expense

def clean_string(s):
    """–ü—Ä–µ–º–∞—Ö–≤–∞ –ø—Ä–µ–ø–∏–Ω–∞—Ç–µ–ª–Ω–∏ –∑–Ω–∞—Ü–∏ –∏ –ø—Ä–∞–≤–∏ –≤—Å–∏—á–∫–æ –º–∞–ª–∫–∏ –±—É–∫–≤–∏."""
    return re.sub(r'[^\w\s]', '', s).lower()
import re
import requests

def get_transaction_types():
    # –ú–æ–∂–µ—à –¥–∞ –∑–∞–º–µ–Ω–∏—à —Å—ä—Å —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç Airtable –≤ –±—ä–¥–µ—â–µ
    return [
        "Proxy", "New SIM card UK", "Office supplies",
        "Ivelin money", "GSM", "–¢–∞–∫—Å–∏", "–ü—ä—Ç—É–≤–∞–Ω–µ", "–î—Ä—É–≥–∏"
    ]

from telebot import types  # –£–≤–µ—Ä–∏ —Å–µ, —á–µ —Ç–æ–∑–∏ –∏–º–ø–æ—Ä—Ç –µ –Ω–∞–ª–∏—á–µ–Ω!

@bot.message_handler(commands=['settype'])
def ask_transaction_type(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    types_list = get_transaction_types()
    buttons = [types.InlineKeyboardButton(text=typ, callback_data=typ) for typ in types_list]
    markup.add(*buttons)

    msg = bot.send_message(message.chat.id, "üìå –ò–∑–±–µ—Ä–∏ –≤–∏–¥ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞:", reply_markup=markup)
    user_pending_type[message.chat.id] = {"msg_id": msg.message_id}

@bot.callback_query_handler(func=lambda call: call.data in get_transaction_types())
def handle_transaction_type_selection(call):
    user_id = call.message.chat.id
    selected_type = call.data

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=user_id,
        message_id=user_pending_type[user_id]["msg_id"],
        text=f"‚úÖ –ò–∑–±—Ä–∞ –≤–∏–¥: {selected_type}"
    )

    user_pending_type[user_id]["selected"] = selected_type


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "/edit"
@bot.message_handler(commands=['edit'])
def handle_edit(message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∑–∞–ø–∏—Å."""
    user_id = message.chat.id
    if user_id in user_records and user_records[user_id]:
        # –ü–æ–∫–∞–∂–µ—Ç–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å–ø–∏—Å—ä–∫ —Å –Ω–µ–≥–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å–∏
        records = user_records[user_id]
        reply_text = "–í–∞—à–∏—Ç–µ –∑–∞–ø–∏—Å–∏:\n"
        for i, record_id in enumerate(records, 1):
            # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ –∑–∞–ø–∏—Å–∏—Ç–µ –æ—Ç Airtable
            record_url = f"{url_reports}/{record_id}"
            res = requests.get(record_url, headers=headers)
            if res.status_code == 200:
                data = res.json()
                record_fields = data.get("fields", {})
                description = record_fields.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ")
                amount = record_fields.get("–°—É–º–∞ (–ª–≤.)", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—É–º–∞")
                account_id = record_fields.get("–ê–∫–∞—É–Ω—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç")

                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–º–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
                if isinstance(account_id, list) and account_id:
                    account_url = f"{url_accounts}/{account_id[0]}"
                    res_account = requests.get(account_url, headers=headers)
                    if res_account.status_code == 200:
                        account_data = res_account.json()
                        account_name = account_data.get("fields", {}).get("REG", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç")
                    else:
                        account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç"
                else:
                    account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç"
                
                # –ü–æ–∫–∞–∑–≤–∞–º–µ —Ü–µ–ª–∏—è –∑–∞–ø–∏—Å –≤ –µ–¥–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
                full_text = f"{amount} {description} –æ—Ç {account_name}"
                reply_text += f"{i}. –ó–∞–ø–∏—Å {record_id} - {full_text}\n"
            else:
                reply_text += f"{i}. –ó–∞–ø–∏—Å {record_id} - –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏.\n"
        
        sent_msg = bot.reply_to(message, reply_text + "–ò–∑–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä /edit 1):")
        bot.register_next_step_handler(sent_msg, process_edit_choice)
    else:
        bot.reply_to(message, "‚ùå –ù—è–º–∞ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

def update_amount(message):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –Ω–æ–≤–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ –∑–∞–ø–∏—Å –≤ Airtable."""
    user_id = message.chat.id
    if user_id in user_editing:
        record_id = user_editing[user_id]['record_id']
        new_amount_str = message.text.strip()

        try:
            # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "100 –ª–≤.", "250 EUR", "50 GBP")
            m = re.match(r'^(\d+(?:\.\d+)?)(\s*(–ª–≤|lv|–ª–µ–≤|–ª–µ–≤–∞|bgn|eur|‚Ç¨|–µ–≤—Ä–æ|evro|gbp|¬£|–ø–∞—É–Ω–¥|–ø–∞—É–Ω–¥–∞|paunda))$', new_amount_str.strip(), re.IGNORECASE)
            if m:
                amount_str = m.group(1)  # –°—É–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 100, 250)
                currency_str = m.group(2).strip().lower()  # –í–∞–ª—É—Ç–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ª–≤., EUR, GBP)

                # –ü–µ—á–∞—Ç –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                print(f"Received amount: {amount_str}")
                print(f"Received currency: {currency_str}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Å—É–º–∞ –≤ —á–∏—Å–ª–æ
                new_amount = float(amount_str)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ –∫–æ–¥
                if currency_str in ("–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"):
                    new_currency_code = "BGN"
                elif currency_str in ("eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"):
                    new_currency_code = "EUR"
                elif currency_str in ("gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"):
                    new_currency_code = "GBP"
                else:
                    bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞: –ª–≤., EUR, GBP.")
                    return

                # –ü–µ—á–∞—Ç –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
                print(f"Updating fields: –°—É–º–∞ = {new_amount}, –í–∞–ª—É—Ç–∞ = {new_currency_code}")

                # –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ —Å—É–º–∞ –∏ –≤–∞–ª—É—Ç–∞ –≤ Airtable
                new_data = {
                    "fields": {
                        "–°—É–º–∞ (–ª–≤.)" if new_currency_code == "BGN" else "–°—É–º–∞ (EUR)" if new_currency_code == "EUR" else "–°—É–º–∞ (GBP)": new_amount,
                        "–í–∞–ª—É—Ç–∞": new_currency_code
                    }
                }

                res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
                # –ü–µ—á–∞—Ç –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable
                print(f"Response from Airtable: {res_put.status_code} - {res_put.text}")  # –ü–µ—á–∞—Ç–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable

                if res_put.status_code == 200:
                    bot.reply_to(message, "‚úÖ –°—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ —Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏.")
                    del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
                else:
                    bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
                    del user_editing[user_id]
            else:
                bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 100 –ª–≤., 250 EUR, 50 GBP.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞.")
            return
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")
        
@bot.message_handler(commands=['delete'])
def handle_delete(message):
    """–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∑–∞–ø–∏—Å."""
    user_id = message.chat.id
    
    if user_id in user_records and user_records[user_id]:
        # –ü–æ–∫–∞–∂–µ—Ç–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å–ø–∏—Å—ä–∫ —Å –Ω–µ–≥–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å–∏
        records = user_records[user_id]
        reply_text = "–í–∞—à–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:\n"
        
        for i, record_id in enumerate(records, 1):
            # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ –∑–∞–ø–∏—Å–∏—Ç–µ –æ—Ç Airtable
            record_url = f"{url_reports}/{record_id}"
            res = requests.get(record_url, headers=headers)
            if res.status_code == 200:
                data = res.json()
                record_fields = data.get("fields", {})
                description = record_fields.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ")
                amount = record_fields.get("–°—É–º–∞ (–ª–≤.)", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—É–º–∞")
                account_id = record_fields.get("–ê–∫–∞—É–Ω—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç")

                # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–º–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
                if isinstance(account_id, list) and account_id:
                    account_url = f"{url_accounts}/{account_id[0]}"
                    res_account = requests.get(account_url, headers=headers)
                    if res_account.status_code == 200:
                        account_data = res_account.json()
                        account_name = account_data.get("fields", {}).get("REG", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç")
                    else:
                        account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç"
                else:
                    account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç"
                
                # –ü–æ–∫–∞–∑–≤–∞–º–µ —Ü–µ–ª–∏—è –∑–∞–ø–∏—Å –≤ –µ–¥–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
                full_text = f"{amount} {description} –æ—Ç {account_name}"
                reply_text += f"{i}. –ó–∞–ø–∏—Å {record_id} - {full_text}\n"
            else:
                reply_text += f"{i}. –ó–∞–ø–∏—Å {record_id} - –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏.\n"
        
        # –ò–∑–ø—Ä–∞—â–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø–∏—Ç–≤–∞–º–µ –∑–∞ –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
        sent_msg = bot.reply_to(message, reply_text + "–ò–∑–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä /delete 1):")
        bot.register_next_step_handler(sent_msg, process_delete_choice)
    else:
        bot.reply_to(message, "‚ùå –ù—è–º–∞ –∑–∞–ø–∏—Å–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ.")


def process_delete_choice(message):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ."""
    user_id = message.chat.id
    try:
        # –ò–∑–±–æ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (–ø–æ –Ω–æ–º–µ—Ä)
        record_index = int(message.text.split()[1]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ –∏–Ω–¥–µ–∫—Å
        if user_id in user_records and 0 <= record_index < len(user_records[user_id]):
            record_id = user_records[user_id][record_index]
            print(f"Deleting record {record_id}")
            
            # –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å–∞ –æ—Ç Airtable
            delete_url = f"{url_reports}/{record_id}"
            res_delete = requests.delete(delete_url, headers=headers)

            if res_delete.status_code == 200:
                bot.reply_to(message, f"‚úÖ –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ {record_id} –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ.")
                # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç —Å–ø–∏—Å—ä–∫–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
                user_records[user_id].remove(record_id)
            else:
                bot.reply_to(message, f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ {record_id}.")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å.")
    except (ValueError, IndexError):
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å.")       

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø–æ–ª–µ—Ç–æ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ (–æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–∞ –∏–ª–∏ –∞–∫–∞—É–Ω—Ç)
def process_edit_field(message):
    user_id = message.chat.id
    field_to_edit = message.text.lower()

    if field_to_edit == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        user_editing[user_id]['field'] = '–æ–ø–∏—Å–∞–Ω–∏–µ'
        bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–æ–∑–∏ –∑–∞–ø–∏—Å:")
        bot.register_next_step_handler(message, process_new_description)
    elif field_to_edit == "—Å—É–º–∞":
        user_editing[user_id]['field'] = '—Å—É–º–∞'
        bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ —Å—É–º–∞—Ç–∞:")
        bot.register_next_step_handler(message, update_amount)  # –ò–∑–≤–∏–∫–≤–∞–º–µ update_amount –∑–∞ —Å—É–º–∞
    elif field_to_edit == "–∞–∫–∞—É–Ω—Ç":
        user_editing[user_id]['field'] = '–∞–∫–∞—É–Ω—Ç'
        bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∏—è –∞–∫–∞—É–Ω—Ç:")
        bot.register_next_step_handler(message, process_new_account)  # –ò–∑–≤–∏–∫–≤–∞–º–µ process_new_account –∑–∞ –∞–∫–∞—É–Ω—Ç
    else:
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –µ–¥–Ω–∞ –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ –æ–ø—Ü–∏–∏: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–∞, –∞–∫–∞—É–Ω—Ç.")
        bot.register_next_step_handler(message, process_edit_field)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –∑–∞–ø–∏—Å
@bot.message_handler(func=lambda message: message.text.startswith('/edit '))
def process_edit_choice(message):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ."""
    user_id = message.chat.id
    try:
        record_index = int(message.text.split()[1]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ –∏–Ω–¥–µ–∫—Å
        if user_id in user_records and 0 <= record_index < len(user_records[user_id]):
            record_id = user_records[user_id][record_index]
            # –ó–∞–ø–∏—Å–≤–∞–º–µ –∫–æ–π –∑–∞–ø–∏—Å —â–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–º–µ –∏ –∫–æ–π –ø–æ–ª–µ —Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞
            user_editing[user_id] = {'record_id': record_id, 'field': None}
            # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∑–∏ –∑–∞–ø–∏—Å –≤ Airtable
            bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∫–∞–∫–≤–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–∞ –∏–ª–∏ –∞–∫–∞—É–Ω—Ç.")
            bot.register_next_step_handler(message, process_edit_field)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å. –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä.")
    except ValueError:
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å.")

def process_new_description(message):
    """–û–±–Ω–æ–≤—è–≤–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ Airtable."""
    user_id = message.chat.id
    if user_id in user_editing:
        record_id = user_editing[user_id]['record_id']
        new_description = message.text.strip()

        # –ü–µ—á–∞—Ç –Ω–∞ –Ω–æ–≤–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        print(f"Updating description: {new_description}")

        # –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ Airtable
        new_data = {"fields": {"–û–ø–∏—Å–∞–Ω–∏–µ": new_description}}
        res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)

        if res_put.status_code == 200:
            bot.reply_to(message, "‚úÖ –ó–∞–ø–∏—Å—ä—Ç –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
            del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
        else:
            print(f"Error response: {res_put.status_code} - {res_put.text}")  # –ü–µ—á–∞—Ç–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable
            bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞–ø–∏—Å–∞.")
            del user_editing[user_id]
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

       # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –Ω–æ–≤–∞—Ç–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞
def process_new_amount(message):
    """–û–±–Ω–æ–≤—è–≤–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ Airtable."""
    user_id = message.chat.id
    if user_id in user_editing and user_editing[user_id]['field'] == '—Å—É–º–∞':
        record_id = user_editing[user_id]['record_id']
        new_amount_str = message.text.strip()

        try:
            # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "100 –ª–≤.", "250 EUR", "50 GBP")
            m = re.match(r'^(\d+(?:\.\d+)?)(\s*(–ª–≤|lv|–ª–µ–≤|–ª–µ–≤–∞|bgn|eur|‚Ç¨|–µ–≤—Ä–æ|evro|gbp|¬£|–ø–∞—É–Ω–¥|–ø–∞—É–Ω–¥–∞|paunda))$', new_amount_str.strip(), re.IGNORECASE)
            if m:
                amount_str = m.group(1)  # –°—É–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 100, 250)
                currency_str = m.group(2).strip().lower()  # –í–∞–ª—É—Ç–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ª–≤., EUR, GBP)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Å—É–º–∞ –≤ —á–∏—Å–ª–æ
                new_amount = float(amount_str)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ –∫–æ–¥
                if currency_str in ("–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"):
                    new_currency_code = "BGN"
                elif currency_str in ("eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"):
                    new_currency_code = "EUR"
                elif currency_str in ("gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"):
                    new_currency_code = "GBP"
                else:
                    bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞: –ª–≤., EUR, GBP.")
                    return

                # –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ —Å—É–º–∞ –∏ –≤–∞–ª—É—Ç–∞ –≤ Airtable
                bot.reply_to(message, "–ú–æ–ª—è, –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ —Ä–µ–¥–∞–∫—Ü–∏—è—Ç–∞ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
                new_data = {
                    "fields": {
                        "–°—É–º–∞ (–ª–≤.)" if new_currency_code == "BGN" else "–°—É–º–∞ (EUR)" if new_currency_code == "EUR" else "–°—É–º–∞ (GBP)": new_amount,
                        "–í–∞–ª—É—Ç–∞": new_currency_code
                    }
                }

                res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
                if res_put.status_code == 200:
                    bot.reply_to(message, "‚úÖ –°—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ —Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏.")
                    del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
                else:
                    bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
                    del user_editing[user_id]
            else:
                bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 100 –ª–≤., 250 EUR, 50 GBP.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞.")
            return
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –Ω–æ–≤–∞—Ç–∞ –≤–∞–ª—É—Ç–∞
def process_new_currency(message, new_amount):
    """–û–±–Ω–æ–≤—è–≤–∞ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ Airtable."""
    user_id = message.chat.id
    new_currency = message.text.strip().lower()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤–∞–ª—É—Ç–∞—Ç–∞ –∫—ä–º —Ñ–æ—Ä–º–∞—Ç –∑–∞ Airtable
    if new_currency in ["–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"]:
        new_currency_code = "BGN"
    elif new_currency in ["eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"]:
        new_currency_code = "EUR"
    elif new_currency in ["gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"]:
        new_currency_code = "GBP"
    else:
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞: –ª–≤., EUR, GBP.")
        return

    # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ Airtable
    user_id = message.chat.id
    if user_id in user_editing:
        record_id = user_editing[user_id]['record_id']
        new_data = {
            "fields": {
                "–°—É–º–∞ (–ª–≤.)" if new_currency_code == "BGN" else "–°—É–º–∞ (EUR)" if new_currency_code == "EUR" else "–°—É–º–∞ (GBP)": new_amount,
                "–í–∞–ª—É—Ç–∞": new_currency_code  # –î–æ–±–∞–≤—è–º–µ –ø–æ–ª–µ—Ç–æ –∑–∞ –≤–∞–ª—É—Ç–∞
            }
        }

        res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
        if res_put.status_code == 200:
            bot.reply_to(message, "‚úÖ –°—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ —Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏.")
            del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
        else:
            bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
            del user_editing[user_id]
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

        
def process_new_account(message):
    """–û–±–Ω–æ–≤—è–≤–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable —Å —á–∞—Å—Ç–∏—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –∏–º–µ—Ç–æ."""
    user_id = message.chat.id
    if user_id in user_editing and user_editing[user_id]['field'] == '–∞–∫–∞—É–Ω—Ç':
        record_id = user_editing[user_id]['record_id']
        new_account = message.text.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏

        # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –≤—Ö–æ–¥–∞: –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏
        normalized_input = re.sub(r"[^0-9A-Za-z]+", " ", new_account).strip().lower()
        keywords = normalized_input.split()

        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∞—Ç–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ —Å –ª–æ–≥–∏–∫–∞ AND
        formula = "AND(" + ", ".join([f"SEARCH('{term}', LOWER({{REG}})) > 0" for term in keywords]) + ")"
        params = {"filterByFormula": formula}

        # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable ("–í–°–ò–ß–ö–ò –ê–ö–ê–£–ù–¢–ò") –ø–æ –∫–æ–ª–æ–Ω–∞—Ç–∞ REG —Å —á–∞—Å—Ç–∏—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ
        res = requests.get(url_accounts, headers=headers, params=params)

        if res.status_code == 200:
            data = res.json()
            records = data.get("records", [])
            if len(records) > 0:
                account_id = records[0]["id"]  # ID –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω –∞–∫–∞—É–Ω—Ç
                # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable
                new_data = {"fields": {"–ê–∫–∞—É–Ω—Ç": [account_id]}}
                res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
                if res_put.status_code == 200:
                    bot.reply_to(message, "‚úÖ –ê–∫–∞—É–Ω—Ç—ä—Ç –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
                else:
                    bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞.")
            else:
                bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∞–∫–∞—É–Ω—Ç —Å —Ç–æ–≤–∞ –∏–º–µ.")
        else:
            bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ —Å—ä–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏ –æ—Ç—á–µ—Ç–∏
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text  # –ü–æ–ª—É—á–∞–≤–∞–º–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
    user_name = message.from_user.first_name  # –ò–∑–≤–ª–∏—á–∞–º–µ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    user_id = message.chat.id  # ID –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ —á–∞—Ç–∞
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –≤—Å—è–∫–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –æ—Ç—á–µ—Ç."""

    # –í–∑–µ–º–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∏ —á–∞—Å –≤ –∂–µ–ª–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
    current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –í–∑–µ–º–∞–º–µ –¥–∞—Ç–∞ –∏ —á–∞—Å
    
    if re.search(r'\b–æ—Ç\b', text, re.IGNORECASE):  # –¢—ä—Ä—Å–∏–º "–æ—Ç"
        account_part = re.split(r'\b–æ—Ç\b', text, flags=re.IGNORECASE)[-1].strip()
    elif re.search(r'\bot\b', text, re.IGNORECASE):  # –¢—ä—Ä—Å–∏–º "ot"
        account_part = re.split(r'\bot\b', text, flags=re.IGNORECASE)[-1].strip()
    else:
        account_part = ""
    amount, currency_code, description, account_name, is_expense = parse_transaction(text)

    if amount is None or currency_code is None or description == "":
        reply_text = ("‚ö†Ô∏è –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ñ–æ—Ä–º–∞—Ç. –ú–æ–ª—è, –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–æ:\n"
                      "`100 –ª–≤. –∑–∞ <–æ–ø–∏—Å–∞–Ω–∏–µ> –æ—Ç <–∞–∫–∞—É–Ω—Ç>`")
        bot.reply_to(message, reply_text, parse_mode="Markdown")
        return

    # –ò–∑–≤–ª–∏—á–∞–º–µ —Å–∞–º–æ —á–∞—Å—Ç—Ç–∞ —Å–ª–µ–¥ "–æ—Ç" –∏–ª–∏ "ot"
    account_part = ""
    if re.search(r'\b–æ—Ç\b', text, re.IGNORECASE):
        account_part = re.split(r'\b–æ—Ç\b', text, flags=re.IGNORECASE)[-1].strip()
    elif re.search(r'\bot\b', text, re.IGNORECASE):
        account_part = re.split(r'\bot\b', text, flags=re.IGNORECASE)[-1].strip()

    # –ü–æ—á–∏—Å—Ç–≤–∞–º–µ –∞–∫–∞—É–Ω—Ç–∞ –∏ —Å—ä–∑–¥–∞–≤–∞–º–µ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    normalized_input = re.sub(r"[^\w\s]", " ", account_part).lower()
    keywords = normalized_input.split()

    # –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–∞–º–µ —á–∞—Å—Ç—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–ª–µ—Ç–æ REG
    norm_reg = 'REGEX_REPLACE(LOWER({REG}), "[^0-9a-z ]", " ")'

    # –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ —É—Å–ª–æ–≤–∏–µ –∑–∞ –≤—Å—è–∫–∞ –¥—É–º–∞: SEARCH("–¥—É–º–∞", –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω REG) > 0
    conditions = [f'SEARCH(\"{w}\", {norm_reg}) > 0' for w in keywords]

    # –°–≤—ä—Ä–∑–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —É—Å–ª–æ–≤–∏—è —Å AND(...)
    formula_filter = "AND(" + ", ".join(conditions) + ")"

    # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable ("–í–°–ò–ß–ö–ò –ê–ö–ê–£–ù–¢–ò") –ø–æ –∫–æ–ª–æ–Ω–∞—Ç–∞ REG —Å —á–∞—Å—Ç–∏—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ
    account_id = None
    if account_name:
        # –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –∏ —Ç—ä—Ä—Å–µ–Ω–∏—è —Ç–µ–∫—Å—Ç
        search_term = clean_string(account_name.strip())

        # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞ –∫—ä–º Airtable API
        params = {"filterByFormula": formula_filter}
        res = requests.get(url_accounts, headers=headers, params=params)

        print(f"Search response: {res.text}")  # –¢–æ–≤–∞ —â–µ –Ω–∏ –ø–æ–∫–∞–∂–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable

        if res.status_code == 200:
            data = res.json()
            records = data.get("records", [])
            if len(records) > 0:
                account_id = records[0]["id"]  # ID –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–ø–∏—Å
                print(f"Account found: {account_id}")
            else:
                print("No account found.")
        else:
            print(f"Error searching account: HTTP {res.status_code} - {res.text}")      

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –Ω–æ–≤–∏—è –∑–∞–ø–∏—Å –≤ "–û—Ç—á–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º"
    fields = {
        "–î–∞—Ç–∞": current_datetime,  # –î–æ–±–∞–≤—è–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∏ —á–∞—Å –≤ –ø–æ–ª–µ—Ç–æ "–î–∞—Ç–∞"
        "–û–ø–∏—Å–∞–Ω–∏–µ": description,
        
    }
    if user_id in user_pending_type and user_pending_type[user_id].get("selected"):
        fields["–í–ò–î"] = user_pending_type[user_id]["selected"]

    if currency_code == "BGN":
        fields["–°—É–º–∞ (–ª–≤.)"] = amount
    elif currency_code == "EUR":
        fields["–°—É–º–∞ (EUR)"] = amount
    elif currency_code == "GBP":
        fields["–°—É–º–∞ (GBP)"] = amount

    if account_id:
        fields["–ê–∫–∞—É–Ω—Ç"] = [account_id]  # –ê–∫–æ –∞–∫–∞—É–Ω—Ç—ä—Ç –µ –Ω–∞–º–µ—Ä–µ–Ω, –¥–æ–±–∞–≤—è–º–µ ID –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
    else:
        # –ê–∫–æ –∞–∫–∞—É–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω, —É–≤–µ–¥–æ–º—è–≤–∞–º–µ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤—è–º–µ –∏–º–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ
        reply_text = f"‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∞–∫–∞—É–Ω—Ç —Å –∏–º–µ: {account_name}. –ó–∞–ø–∏—Å–∞—Ö–º–µ –∞–∫–∞—É–Ω—Ç–∞ –≤ –ø–æ–ª–µ—Ç–æ '–û–ø–∏—Å–∞–Ω–∏–µ'."
        bot.reply_to(message, reply_text)
        fields["–û–ø–∏—Å–∞–Ω–∏–µ"] = f"{description} (–ê–∫–∞—É–Ω—Ç: {account_name})"

    # –î–æ–±–∞–≤—è–º–µ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    fields["–ò–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"] = user_name  # –î–æ–±–∞–≤—è–º–µ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –Ω–æ–≤–æ—Ç–æ –ø–æ–ª–µ
    
    # –ò–∑–ø—Ä–∞—â–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∫—ä–º Airtable
    data = {"fields": fields}
    res_post = requests.post(url_reports, headers=headers, json=data)
    if res_post.status_code in (200, 201):
        record_id = res_post.json().get("id")  # –ü–æ–ª—É—á–∞–≤–∞–º–µ ID –Ω–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å
        # –î–æ–±–∞–≤—è–º–µ –∑–∞–ø–∏—Å –≤ —Å–ø–∏—Å—ä–∫–∞ —Å –≤—Å–∏—á–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        if message.chat.id not in user_records:
            user_records[message.chat.id] = []
        user_records[message.chat.id].append(record_id)
        reply_text = "‚úÖ –û—Ç—á–µ—Ç—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ."
        bot.reply_to(message, reply_text)
    else:
        error_msg = res_post.text
        reply_text = "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ—Ç–æ –Ω–∞ –æ—Ç—á–µ—Ç–∞!"
        bot.reply_to(message, reply_text)
        print(f"Failed to create record: HTTP {res_post.status_code} - {error_msg}")

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
print("ü§ñ Bot is polling...")
# –ó–∞–≤—ä—Ä—à–≤–∞–º–µ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ—Ç–æ –ø—É—Å–∫–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
bot.polling(none_stop=True)
