import os
import re
import requests
from datetime import datetime
import telebot
from telebot import types  # ‚¨ÖÔ∏è —Ç—É–∫
import time


TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AIRTABLE_PERSONAL_ACCESS_TOKEN = os.getenv("AIRTABLE_PERSONAL_ACCESS_TOKEN")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")  # ID –Ω–∞ Airtable –±–∞–∑–∞—Ç–∞
TABLE_ACCOUNTS = "–í–°–ò–ß–ö–ò –ê–ö–ê–£–ù–¢–ò"
TABLE_REPORTS = "–û—Ç—á–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º"
TABLE_TRANSACTION_TYPES = "–í–ò–î –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø"

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ URL –∏ headers –∑–∞ Airtable API
url_accounts = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ACCOUNTS}"
url_reports = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_REPORTS}"
headers = {
    "Authorization": f"Bearer {AIRTABLE_PERSONAL_ACCESS_TOKEN}",
    "Content-Type": "application/json"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Telegram –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
user_records = {}

user_pending_type = {}

# –°–ª–æ–≤–∞—Ä –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
pending_transaction_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞–º–µ –ø–∞—Ä—Å–Ω–∞—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
user_editing = {}

def normalize_text(text):
    """–ü—Ä–∏–≤–µ–∂–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏ –∏ –ø—Ä–µ–º–∞—Ö–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏."""
    text = text.lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏
    text = re.sub(r'[^a-z–∞-—è0-9\s]', '', text)  # –ü—Ä–µ–º–∞—Ö–≤–∞ –≤—Å–∏—á–∫–∏ —Å–∏–º–≤–æ–ª–∏, —Ä–∞–∑–ª–∏—á–Ω–∏ –æ—Ç –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏
    return text

def find_account(account_name):
    """–¢—ä—Ä—Å–∏ –∞–∫–∞—É–Ω—Ç –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≥–æ–ª–µ–º–∏/–º–∞–ª–∫–∏ –±—É–∫–≤–∏ –∏ —Ç–∏—Ä–µ—Ç–∞."""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
    normalized_account_name = normalize_text(account_name)

    # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è –∞–∫–∞—É–Ω—Ç –Ω–∞ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    search_terms = normalized_account_name.strip().split()

    # –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ filterByFormula —Å AND –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    conditions = [f'SEARCH("{term}", LOWER({{REG}})) > 0' for term in search_terms]
    formula = f'AND({",".join(conditions)})'
    params = {"filterByFormula": formula}

    # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞ –∫—ä–º Airtable API
    res = requests.get(url_accounts, headers=headers, params=params)
    if res.status_code == 200:
        data = res.json()
        records = data.get("records", [])
        if len(records) > 0:
            account_id = records[0]["id"]  # –í–∑–µ–º–∞–º–µ ID –Ω–∞ –ø—ä—Ä–≤–∏—è —Å—ä–≤–ø–∞–¥–Ω–∞–ª –∞–∫–∞—É–Ω—Ç
            return account_id
    return None

from datetime import datetime, timedelta

def get_user_records_from_airtable(user_name):
    """–ò–∑–≤–ª–∏—á–∞ –∑–∞–ø–∏—Å–∏—Ç–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 60 –º–∏–Ω—É—Ç–∏ –æ—Ç Airtable –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª."""
    now = datetime.now()
    one_hour_ago = now - timedelta(minutes=60)
    now_iso = now.isoformat()
    hour_ago_iso = one_hour_ago.isoformat()

    # Airtable filterByFormula —Ç—ä—Ä—Å–∏ –ø–æ –ò–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ –î–∞—Ç–∞ (ISO —Ñ–æ—Ä–º–∞—Ç)
    formula = (
        f"AND("
        f"{{–ò–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è}} = '{user_name}',"
        f"IS_AFTER({{–î–∞—Ç–∞}}, '{hour_ago_iso}')"
        f")"
    )

    params = {"filterByFormula": formula}
    res = requests.get(url_reports, headers=headers, params=params)

    if res.status_code == 200:
        data = res.json()
        return data.get("records", [])
    else:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å–∏: {res.status_code} - {res.text}")
        return []

def parse_transaction(text):
    """
    –ü–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∏–¥–∞ "<—Å—É–º–∞> <–≤–∞–ª—É—Ç–∞> –∑–∞ <–æ–ø–∏—Å–∞–Ω–∏–µ> –æ—Ç <–∞–∫–∞—É–Ω—Ç>".
    –í—Ä—ä—â–∞ –∫–æ—Ä—Ç–µ–∂ (amount, currency_code, description, account_name, is_expense).
    """
    text = text.strip()

    # –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–∏—Ü–∞ –∑–∞ "–∑–∞" –∏ "–æ—Ç"
    text = text.replace('za', '–∑–∞').replace('ot', '–æ—Ç')

    amount = None
    currency_code = None
    description = ""
    account_name = None
    is_expense = False  # –§–ª–∞–≥, –∫–æ–π—Ç–æ –ø–æ–∫–∞–∑–≤–∞ –¥–∞–ª–∏ –µ —Ä–∞–∑—Ö–æ–¥

    # –û—Ç–¥–µ–ª—è–Ω–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –∞–∫–∞—É–Ω—Ç–∞ (–∞–∫–æ –∏–º–∞ "–æ—Ç ..." –∏–ª–∏ "from ...")
    pre_acc = text
    if re.search(r'(?i)\b–æ—Ç\b', text):
        parts = text.rsplit(" –æ—Ç ", 1)
        pre_acc = parts[0].strip()
        account_name = parts[1].strip() if len(parts) > 1 else ""
    elif re.search(r'(?i)\bfrom\b', text):
        parts = text.rsplit(" from ", 1)
        pre_acc = parts[0].strip()
        account_name = parts[1].strip() if len(parts) > 1 else ""

    # –û—Ç–¥–µ–ª—è–Ω–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ (–∞–∫–æ –∏–º–∞ "–∑–∞ ..." –∏–ª–∏ "for ...")
    amount_currency_segment = pre_acc
    if re.search(r'(?i)\b–∑–∞\b', pre_acc):
        parts = pre_acc.split(" –∑–∞ ", 1)  # —Ä–∞–∑–¥–µ–ª—è —Å–∞–º–æ –ø—Ä–∏ –ø—ä—Ä–≤–æ—Ç–æ —Å—Ä–µ—â–∞–Ω–µ –Ω–∞ "–∑–∞"
        amount_currency_segment = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""
    elif re.search(r'(?i)\bfor\b', pre_acc):
        parts = pre_acc.split(" for ", 1)
        amount_currency_segment = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""

    # –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥ –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥
    if re.search(r'(?i)\brazhod\b', description) or re.search(r'(?i)\bplateno\b', description):
        is_expense = True
    elif re.search(r'(?i)\bprihod\b', description) or re.search(r'(?i)\bpostuplenie\b', description):
        is_expense = False

    # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ –æ—Ç –ø—ä—Ä–≤–∏—è —Å–µ–≥–º–µ–Ω—Ç (–Ω–∞–ø—Ä. "100 –ª–≤." –∏–ª–∏ "250 EUR")
    amount_str = ""
    currency_str = ""
    parts = amount_currency_segment.replace(",", ".").split()
    if len(parts) >= 2:
        amount_str = parts[0]
        currency_str = parts[1]
    else:
        m = re.match(r'^(\d+(?:\.\d+)?)(\D+)$', amount_currency_segment.replace(",", "."))
        if m:
            amount_str = m.group(1)
            currency_str = m.group(2)

    amount_str = amount_str.strip()
    currency_str = currency_str.strip().rstrip(".")
    if currency_str:
        cs = currency_str.lower()
        # –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∏ —Å –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–∏—Ü–∞
        if cs in ("–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"):
            currency_code = "BGN"
        elif cs in ("eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"):
            currency_code = "EUR"
        elif cs in ("gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"):
            currency_code = "GBP"

    if amount_str:
        try:
            amount = float(amount_str)
        except ValueError:
            amount = None

    # –ê–∫–æ –µ —Ä–∞–∑—Ö–æ–¥, –ø–æ—Å—Ç–∞–≤—è–º–µ –∑–Ω–∞–∫ –º–∏–Ω—É—Å –ø—Ä–µ–¥ —Å—É–º–∞—Ç–∞
    if is_expense and amount is not None:
        amount = -amount

    return amount, currency_code, description, account_name, is_expense

def clean_string(s):
    """–ü—Ä–µ–º–∞—Ö–≤–∞ –ø—Ä–µ–ø–∏–Ω–∞—Ç–µ–ª–Ω–∏ –∑–Ω–∞—Ü–∏ –∏ –ø—Ä–∞–≤–∏ –≤—Å–∏—á–∫–æ –º–∞–ª–∫–∏ –±—É–∫–≤–∏."""
    return re.sub(r'[^\w\s]', '', s).lower()
import re
import requests

def get_transaction_types():
    url_types = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/–í–ò–î%20–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø"
    headers = {
        "Authorization": f"Bearer {AIRTABLE_PERSONAL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    res = requests.get(url_types, headers=headers)

    types_dict = {}

    if res.status_code == 200:
        data = res.json()
        for record in data.get("records", []):
            name = record["fields"].get("–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø")
            if name:
                types_dict[name] = record["id"]
    else:
        print("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º Airtable:", res.status_code, res.text)

    return types_dict

def get_transaction_type_options():
    """–ò–∑–≤–ª–∏—á–∞ –≤—Å–∏—á–∫–∏ –≤–∏–¥–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ '–í–ò–î –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø'."""
    url_type = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/–í–ò–î –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø"
    res = requests.get(url_type, headers=headers)
    if res.status_code == 200:
        data = res.json()
        options = {}
        for record in data.get("records", []):
            label = record["fields"].get("–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø")
            if label:
                options[label] = record["id"]
        return options
    else:
        print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤–∏–¥–æ–≤–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", res.text)
        return {}

def show_filtered_transaction_types(message):
    keyword = message.text.strip().lower()
    user_id = message.chat.id

    all_types = get_transaction_types()
    filtered = {
        name: id_ for name, id_ in all_types.items()
        if keyword in name.lower()
    }

    if not filtered:
        bot.send_message(user_id, "‚ùå –ù—è–º–∞ —Å—ä–≤–ø–∞–¥–µ–Ω–∏—è. –û–ø–∏—Ç–∞–π —Å –¥—Ä—É–≥–∞ –¥—É–º–∞.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=key, callback_data=key) for key in filtered]
    markup.add(*buttons)

    msg = bot.send_message(user_id, f"üìå –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ ‚Äû{keyword}‚Äú:", reply_markup=markup)

    user_pending_type[user_id] = {
        "msg_id": msg.message_id,
        "options": filtered
    }

def handle_filter_input(message):
    keyword = message.text.strip().lower()
    user_id = message.chat.id

    all_types = get_transaction_types()
    filtered = {k: v for k, v in all_types.items() if keyword in k.lower()}

    if not filtered:
        bot.send_message(user_id, "‚ùå –ù—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ —Ç–∞–∑–∏ –¥—É–º–∞.")
        return

    send_transaction_type_page(chat_id=user_id, page=0, filtered_types=filtered)

def send_transaction_type_page(chat_id, page=0, filtered_types=None):
    PAGE_SIZE = 20
    all_types = filtered_types if filtered_types is not None else get_transaction_types()
    sorted_keys = sorted(all_types.keys())
    total_pages = (len(sorted_keys) - 1) // PAGE_SIZE + 1
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    current_page_keys = sorted_keys[start:end]

    markup = types.InlineKeyboardMarkup(row_width=2)

    # üî≤ –î–æ–±–∞–≤—è–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ –ø–æ –¥–≤–æ–π–∫–∏
    for i in range(0, len(current_page_keys), 2):
        row_buttons = []
        for j in range(2):
            if i + j < len(current_page_keys):
                key = current_page_keys[i + j]
                row_buttons.append(types.InlineKeyboardButton(text=key, callback_data=key))
        markup.add(*row_buttons)

    # üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è (—Ä–∞–∑–ª–∏—á–µ–Ω —Å—Ç–∏–ª —Å –µ–º–æ–¥–∂–∏)
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="__prev"))
    if end < len(sorted_keys):
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –ù–∞–ø—Ä–µ–¥", callback_data="__next"))
    if nav_buttons:
        markup.add(*nav_buttons)

    # üîç –§–∏–ª—Ç—ä—Ä –±—É—Ç–æ–Ω —Å—ä—Å —Å—Ç–∏–ª
    markup.add(types.InlineKeyboardButton("üîç –í—ä–≤–µ–¥–∏ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞ üîç", callback_data="__filter"))

    # üì¨ –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
    msg = bot.send_message(chat_id, "üìå –ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –í–ò–î –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞:", reply_markup=markup)

    # üíæ –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
    user_pending_type[chat_id] = {
        "msg_id": msg.message_id,
        "options": all_types,
        "page": page,
        "filtered": filtered_types,
        "selected": None
    }

@bot.message_handler(commands=['settype'])
def ask_transaction_type(message):
    send_transaction_type_page(chat_id=message.chat.id, page=0)

@bot.callback_query_handler(func=lambda call: True)
def handle_transaction_type_selection(call):
    user_id = call.message.chat.id
    print(f"‚öôÔ∏è Callback received: {call}")
    selected_label = call.data

    if user_id not in user_pending_type:
        bot.answer_callback_query(call.id, "‚ùå –ù—è–º–∞ –æ—á–∞–∫–≤–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.")
        return

    if call.data == "FILTER_BY_KEYWORD":
        bot.answer_callback_query(call.id)
        bot.send_message(user_id, "üîç –í—ä–≤–µ–¥–∏ –¥—É–º–∞ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ:")
        bot.register_next_step_handler(call.message, show_filtered_transaction_types)
        return

        
    print(f"üìå user_id: {user_id}")
    print(f"üìå selected_label: {selected_label}")
    print(f"üìå user_pending_type: {user_pending_type.get(user_id)}")
    
    if selected_label in ["__next", "__prev", "__filter"]:
        pass  # –©–µ –æ–±—Ä–∞–±–æ—Ç–∏–º –ø–æ-–Ω–∞–¥–æ–ª—É
    elif selected_label not in user_pending_type[user_id]["options"]:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä.")
        return

    selected_id = user_pending_type[user_id]["options"].get(selected_label)


    if selected_label == "__prev":
        current_page = user_pending_type[user_id].get("page", 0)
        new_page = max(current_page - 1, 0)
        bot.delete_message(user_id, user_pending_type[user_id]["msg_id"])
        send_transaction_type_page(chat_id=user_id, page=new_page, filtered_types=user_pending_type[user_id].get("filtered"))
        return

    elif selected_label == "__next":
        current_page = user_pending_type[user_id].get("page", 0)
        new_page = current_page + 1
        bot.delete_message(user_id, user_pending_type[user_id]["msg_id"])
        send_transaction_type_page(chat_id=user_id, page=new_page, filtered_types=user_pending_type[user_id].get("filtered"))
        return

    elif selected_label == "__filter":
        bot.answer_callback_query(call.id)
        msg = bot.send_message(user_id, "üîç –í—ä–≤–µ–¥–∏ –¥—É–º–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ:")
        bot.register_next_step_handler(msg, handle_filter_input)
        return

    elif selected_label == "__reset":
        bot.answer_callback_query(call.id)
        bot.delete_message(user_id, user_pending_type[user_id]["msg_id"])
        send_transaction_type_page(chat_id=user_id, page=0)  # üßº –ü–æ–∫–∞–∑–≤–∞–º–µ –≤—Å–∏—á–∫–∏
        return


    # üíæ –ó–∞–ø–∞–∑–∏ –∏–∑–±–æ—Ä–∞
    user_pending_type[user_id]["selected"] = selected_id
    user_pending_type[user_id]["selected_label"] = selected_label

    # ‚úÖ –ü–æ–∫–∞–∂–∏ –∏–∑–±—Ä–∞–Ω–æ—Ç–æ
    bot.edit_message_text(
        chat_id=user_id,
        message_id=user_pending_type[user_id]["msg_id"],
        text=f"‚úÖ –ò–∑–±—Ä–∞ –≤–∏–¥: {selected_label}"
    )
    # üì• –ê–∫–æ –∏–º–∞ —á–∞–∫–∞—â–∏ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ‚Äî –∑–∞–ø–∏—Å–≤–∞–º–µ –≤ Airtable
    if user_id in pending_transaction_data:
        tx = pending_transaction_data[user_id]
        account_id = find_account(tx["account_name"])

        fields = {
            "–î–∞—Ç–∞": tx["datetime"],
            "–û–ø–∏—Å–∞–Ω–∏–µ": tx["description"],
            "–ò–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è": tx["user_name"],
            "–í–ò–î": [selected_id],
        }


        if tx["currency_code"] == "BGN":
            fields["–°—É–º–∞ (–ª–≤.)"] = tx["amount"]
        elif tx["currency_code"] == "EUR":
            fields["–°—É–º–∞ (EUR)"] = tx["amount"]
        elif tx["currency_code"] == "GBP":
            fields["–°—É–º–∞ (GBP)"] = tx["amount"]

        if account_id:
            fields["–ê–∫–∞—É–Ω—Ç"] = [account_id]
        else:
            fields["–û–ø–∏—Å–∞–Ω–∏–µ"] = f"{tx['description']} (–ê–∫–∞—É–Ω—Ç: {tx['account_name']})"

        if res_post.status_code in (200, 201):
            record_id = res_post.json().get("id")
            if user_id not in user_records:
                user_records[user_id] = []
            user_records[user_id].append(record_id)
            bot.send_message(user_id, f"‚úÖ –ò–∑–±—Ä–∞ –≤–∏–¥: {selected_label}\nüìå –û—Ç—á–µ—Ç—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            bot.send_message(user_id, f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ—Ç–æ: {res_post.text}")

        # üßπ –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
        del pending_transaction_data[user_id]
        del user_pending_type[user_id]


    # üíæ –ó–∞–ø–∞–∑–∏ –∏–∑–±—Ä–∞–Ω–æ—Ç–æ ID
    user_pending_type[user_id]["selected_label"] = selected_label

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "/edit"
@bot.message_handler(commands=['edit'])
def handle_edit(message):
    user_id = message.chat.id
    user_name = message.from_user.first_name

    records = get_user_records_from_airtable(user_name)

    if not records:
        bot.reply_to(message, "‚ùå –ù—è–º–∞ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")
        return

    user_records[user_id] = [r["id"] for r in records]

    reply_text = "–í–∞—à–∏—Ç–µ –∑–∞–ø–∏—Å–∏:\n"
    for i, record in enumerate(records, 1):
        record_id = record["id"]
        fields = record.get("fields", {})
        description = fields.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ")
        amount = fields.get("–°—É–º–∞ (–ª–≤.)", fields.get("–°—É–º–∞ (EUR)", fields.get("–°—É–º–∞ (GBP)", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—É–º–∞")))
        account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç"

        # –ê–∫–æ –∏–º–∞ –∞–∫–∞—É–Ω—Ç, –∏–∑–≤–ª–∏—á–∞–º–µ –∏–º–µ—Ç–æ
        account_ids = fields.get("–ê–∫–∞—É–Ω—Ç", [])
        if isinstance(account_ids, list) and account_ids:
            acc_res = requests.get(f"{url_accounts}/{account_ids[0]}", headers=headers)
            if acc_res.status_code == 200:
                acc_data = acc_res.json()
                account_name = acc_data.get("fields", {}).get("REG", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç")

        full_text = f"{amount} {description} –æ—Ç {account_name}"
        reply_text += f"{i}. –ó–∞–ø–∏—Å {record_id} - {full_text}\n"

    sent_msg = bot.reply_to(message, reply_text + "–ò–∑–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ (–Ω–∞–ø—Ä. /edit 1):")
    bot.register_next_step_handler(sent_msg, process_edit_choice)


def update_amount(message):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –Ω–æ–≤–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ –∑–∞–ø–∏—Å –≤ Airtable."""
    user_id = message.chat.id
    if user_id in user_editing:
        record_id = user_editing[user_id]['record_id']
        new_amount_str = message.text.strip()

        try:
            # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "100 –ª–≤.", "250 EUR", "50 GBP")
            m = re.match(r'^(\d+(?:\.\d+)?)(\s*(–ª–≤|lv|–ª–µ–≤|–ª–µ–≤–∞|bgn|eur|‚Ç¨|–µ–≤—Ä–æ|evro|gbp|¬£|–ø–∞—É–Ω–¥|–ø–∞—É–Ω–¥–∞|paunda))$', new_amount_str.strip(), re.IGNORECASE)
            if m:
                amount_str = m.group(1)  # –°—É–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 100, 250)
                currency_str = m.group(2).strip().lower()  # –í–∞–ª—É—Ç–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ª–≤., EUR, GBP)

                # –ü–µ—á–∞—Ç –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                print(f"Received amount: {amount_str}")
                print(f"Received currency: {currency_str}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Å—É–º–∞ –≤ —á–∏—Å–ª–æ
                new_amount = float(amount_str)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ –∫–æ–¥
                if currency_str in ("–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"):
                    new_currency_code = "BGN"
                elif currency_str in ("eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"):
                    new_currency_code = "EUR"
                elif currency_str in ("gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"):
                    new_currency_code = "GBP"
                else:
                    bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞: –ª–≤., EUR, GBP.")
                    return

                # –ü–µ—á–∞—Ç –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
                print(f"Updating fields: –°—É–º–∞ = {new_amount}, –í–∞–ª—É—Ç–∞ = {new_currency_code}")

                # –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ —Å—É–º–∞ –∏ –≤–∞–ª—É—Ç–∞ –≤ Airtable
                new_data = {
                    "fields": {
                        "–°—É–º–∞ (–ª–≤.)" if new_currency_code == "BGN" else "–°—É–º–∞ (EUR)" if new_currency_code == "EUR" else "–°—É–º–∞ (GBP)": new_amount,
                        "–í–∞–ª—É—Ç–∞": new_currency_code
                    }
                }

                res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
                # –ü–µ—á–∞—Ç –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable
                print(f"Response from Airtable: {res_put.status_code} - {res_put.text}")  # –ü–µ—á–∞—Ç–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable

                if res_put.status_code == 200:
                    bot.reply_to(message, "‚úÖ –°—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ —Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏.")
                    del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
                else:
                    bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
                    del user_editing[user_id]
            else:
                bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 100 –ª–≤., 250 EUR, 50 GBP.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞.")
            return
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")
        
@bot.message_handler(commands=['delete'])
def handle_delete(message):
    user_id = message.chat.id
    user_name = message.from_user.first_name

    records = get_user_records_from_airtable(user_name)

    if not records:
        bot.reply_to(message, "‚ùå –ù—è–º–∞ –∑–∞–ø–∏—Å–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ.")
        return

    user_records[user_id] = [r["id"] for r in records]

    reply_text = "–í–∞—à–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:\n"
    for i, record in enumerate(records, 1):
        record_id = record["id"]
        fields = record.get("fields", {})
        description = fields.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ")
        amount = fields.get("–°—É–º–∞ (–ª–≤.)", fields.get("–°—É–º–∞ (EUR)", fields.get("–°—É–º–∞ (GBP)", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—É–º–∞")))
        account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç"

        account_ids = fields.get("–ê–∫–∞—É–Ω—Ç", [])
        if isinstance(account_ids, list) and account_ids:
            acc_res = requests.get(f"{url_accounts}/{account_ids[0]}", headers=headers)
            if acc_res.status_code == 200:
                acc_data = acc_res.json()
                account_name = acc_data.get("fields", {}).get("REG", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–∫–∞—É–Ω—Ç")

        full_text = f"{amount} {description} –æ—Ç {account_name}"
        reply_text += f"{i}. –ó–∞–ø–∏—Å {record_id} - {full_text}\n"

    sent_msg = bot.reply_to(message, reply_text + "–ò–∑–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (–Ω–∞–ø—Ä. /delete 1):")
    bot.register_next_step_handler(sent_msg, process_delete_choice)



def process_delete_choice(message):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ."""
    user_id = message.chat.id
    try:
        # –ò–∑–±–æ—Ä –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (–ø–æ –Ω–æ–º–µ—Ä)
        record_index = int(message.text.split()[1]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ –∏–Ω–¥–µ–∫—Å
        if user_id in user_records and 0 <= record_index < len(user_records[user_id]):
            record_id = user_records[user_id][record_index]
            print(f"Deleting record {record_id}")
            
            # –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å–∞ –æ—Ç Airtable
            delete_url = f"{url_reports}/{record_id}"
            res_delete = requests.delete(delete_url, headers=headers)

            if res_delete.status_code == 200:
                bot.reply_to(message, f"‚úÖ –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ {record_id} –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ.")
                # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç —Å–ø–∏—Å—ä–∫–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
                user_records[user_id].remove(record_id)
            else:
                bot.reply_to(message, f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ {record_id}.")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å.")
    except (ValueError, IndexError):
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å.")       

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø–æ–ª–µ—Ç–æ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ (–æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–∞ –∏–ª–∏ –∞–∫–∞—É–Ω—Ç)
def process_edit_field(message):
    user_id = message.chat.id
    field_to_edit = message.text.lower()

    if field_to_edit == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        user_editing[user_id]['field'] = '–æ–ø–∏—Å–∞–Ω–∏–µ'
        bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–æ–∑–∏ –∑–∞–ø–∏—Å:")
        bot.register_next_step_handler(message, process_new_description)
    elif field_to_edit == "—Å—É–º–∞":
        user_editing[user_id]['field'] = '—Å—É–º–∞'
        bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ —Å—É–º–∞—Ç–∞:")
        bot.register_next_step_handler(message, update_amount)  # –ò–∑–≤–∏–∫–≤–∞–º–µ update_amount –∑–∞ —Å—É–º–∞
    elif field_to_edit == "–∞–∫–∞—É–Ω—Ç":
        user_editing[user_id]['field'] = '–∞–∫–∞—É–Ω—Ç'
        bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∏—è –∞–∫–∞—É–Ω—Ç:")
        bot.register_next_step_handler(message, process_new_account)  # –ò–∑–≤–∏–∫–≤–∞–º–µ process_new_account –∑–∞ –∞–∫–∞—É–Ω—Ç
    else:
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –µ–¥–Ω–∞ –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ –æ–ø—Ü–∏–∏: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–∞, –∞–∫–∞—É–Ω—Ç.")
        bot.register_next_step_handler(message, process_edit_field)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –∑–∞–ø–∏—Å
@bot.message_handler(func=lambda message: message.text.startswith('/edit '))
def process_edit_choice(message):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ."""
    user_id = message.chat.id
    try:
        record_index = int(message.text.split()[1]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ –∏–Ω–¥–µ–∫—Å
        if user_id in user_records and 0 <= record_index < len(user_records[user_id]):
            record_id = user_records[user_id][record_index]
            # –ó–∞–ø–∏—Å–≤–∞–º–µ –∫–æ–π –∑–∞–ø–∏—Å —â–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–º–µ –∏ –∫–æ–π –ø–æ–ª–µ —Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞
            user_editing[user_id] = {'record_id': record_id, 'field': None}
            # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∑–∏ –∑–∞–ø–∏—Å –≤ Airtable
            bot.reply_to(message, "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∫–∞–∫–≤–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–∞ –∏–ª–∏ –∞–∫–∞—É–Ω—Ç.")
            bot.register_next_step_handler(message, process_edit_field)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å. –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä.")
    except ValueError:
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ –∑–∞–ø–∏—Å.")

def process_new_description(message):
    """–û–±–Ω–æ–≤—è–≤–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ Airtable."""
    user_id = message.chat.id
    if user_id in user_editing:
        record_id = user_editing[user_id]['record_id']
        new_description = message.text.strip()

        # –ü–µ—á–∞—Ç –Ω–∞ –Ω–æ–≤–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        print(f"Updating description: {new_description}")

        # –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ Airtable
        new_data = {"fields": {"–û–ø–∏—Å–∞–Ω–∏–µ": new_description}}
        res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)

        if res_put.status_code == 200:
            bot.reply_to(message, "‚úÖ –ó–∞–ø–∏—Å—ä—Ç –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
            del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
        else:
            print(f"Error response: {res_put.status_code} - {res_put.text}")  # –ü–µ—á–∞—Ç–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable
            bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞–ø–∏—Å–∞.")
            del user_editing[user_id]
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

       # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –Ω–æ–≤–∞—Ç–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞
def process_new_amount(message):
    """–û–±–Ω–æ–≤—è–≤–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ Airtable."""
    user_id = message.chat.id
    if user_id in user_editing and user_editing[user_id]['field'] == '—Å—É–º–∞':
        record_id = user_editing[user_id]['record_id']
        new_amount_str = message.text.strip()

        try:
            # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "100 –ª–≤.", "250 EUR", "50 GBP")
            m = re.match(r'^(\d+(?:\.\d+)?)(\s*(–ª–≤|lv|–ª–µ–≤|–ª–µ–≤–∞|bgn|eur|‚Ç¨|–µ–≤—Ä–æ|evro|gbp|¬£|–ø–∞—É–Ω–¥|–ø–∞—É–Ω–¥–∞|paunda))$', new_amount_str.strip(), re.IGNORECASE)
            if m:
                amount_str = m.group(1)  # –°—É–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 100, 250)
                currency_str = m.group(2).strip().lower()  # –í–∞–ª—É—Ç–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ª–≤., EUR, GBP)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Å—É–º–∞ –≤ —á–∏—Å–ª–æ
                new_amount = float(amount_str)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ –∫–æ–¥
                if currency_str in ("–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"):
                    new_currency_code = "BGN"
                elif currency_str in ("eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"):
                    new_currency_code = "EUR"
                elif currency_str in ("gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"):
                    new_currency_code = "GBP"
                else:
                    bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞: –ª–≤., EUR, GBP.")
                    return

                # –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ —Å—É–º–∞ –∏ –≤–∞–ª—É—Ç–∞ –≤ Airtable
                bot.reply_to(message, "–ú–æ–ª—è, –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ —Ä–µ–¥–∞–∫—Ü–∏—è—Ç–∞ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
                new_data = {
                    "fields": {
                        "–°—É–º–∞ (–ª–≤.)" if new_currency_code == "BGN" else "–°—É–º–∞ (EUR)" if new_currency_code == "EUR" else "–°—É–º–∞ (GBP)": new_amount,
                        "–í–∞–ª—É—Ç–∞": new_currency_code
                    }
                }

                res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
                if res_put.status_code == 200:
                    bot.reply_to(message, "‚úÖ –°—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ —Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏.")
                    del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
                else:
                    bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
                    del user_editing[user_id]
            else:
                bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞ —Å –≤–∞–ª—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 100 –ª–≤., 250 EUR, 50 GBP.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞.")
            return
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –Ω–æ–≤–∞—Ç–∞ –≤–∞–ª—É—Ç–∞
def process_new_currency(message, new_amount):
    """–û–±–Ω–æ–≤—è–≤–∞ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ Airtable."""
    user_id = message.chat.id
    new_currency = message.text.strip().lower()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤–∞–ª—É—Ç–∞—Ç–∞ –∫—ä–º —Ñ–æ—Ä–º–∞—Ç –∑–∞ Airtable
    if new_currency in ["–ª–≤", "lv", "–ª–µ–≤", "–ª–µ–≤–∞", "bgn"]:
        new_currency_code = "BGN"
    elif new_currency in ["eur", "‚Ç¨", "–µ–≤—Ä–æ", "evro"]:
        new_currency_code = "EUR"
    elif new_currency in ["gbp", "¬£", "–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paunda"]:
        new_currency_code = "GBP"
    else:
        bot.reply_to(message, "‚ùå –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞: –ª–≤., EUR, GBP.")
        return

    # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ –≤ Airtable
    user_id = message.chat.id
    if user_id in user_editing:
        record_id = user_editing[user_id]['record_id']
        new_data = {
            "fields": {
                "–°—É–º–∞ (–ª–≤.)" if new_currency_code == "BGN" else "–°—É–º–∞ (EUR)" if new_currency_code == "EUR" else "–°—É–º–∞ (GBP)": new_amount,
                "–í–∞–ª—É—Ç–∞": new_currency_code  # –î–æ–±–∞–≤—è–º–µ –ø–æ–ª–µ—Ç–æ –∑–∞ –≤–∞–ª—É—Ç–∞
            }
        }

        res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
        if res_put.status_code == 200:
            bot.reply_to(message, "‚úÖ –°—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞ —Å–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏.")
            del user_editing[user_id]  # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –æ—Ç –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
        else:
            bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É–º–∞—Ç–∞ –∏ –≤–∞–ª—É—Ç–∞—Ç–∞.")
            del user_editing[user_id]
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")

        
def process_new_account(message):
    """–û–±–Ω–æ–≤—è–≤–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable —Å —á–∞—Å—Ç–∏—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –∏–º–µ—Ç–æ."""
    user_id = message.chat.id
    if user_id in user_editing and user_editing[user_id]['field'] == '–∞–∫–∞—É–Ω—Ç':
        record_id = user_editing[user_id]['record_id']
        new_account = message.text.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏

        # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –≤—Ö–æ–¥–∞: –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏
        normalized_input = re.sub(r"[^0-9A-Za-z]+", " ", new_account).strip().lower()
        keywords = normalized_input.split()

        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∞—Ç–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ —Å –ª–æ–≥–∏–∫–∞ AND
        formula = "AND(" + ", ".join([f"SEARCH('{term}', LOWER({{REG}})) > 0" for term in keywords]) + ")"
        params = {"filterByFormula": formula}

        # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable ("–í–°–ò–ß–ö–ò –ê–ö–ê–£–ù–¢–ò") –ø–æ –∫–æ–ª–æ–Ω–∞—Ç–∞ REG —Å —á–∞—Å—Ç–∏—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ
        res = requests.get(url_accounts, headers=headers, params=params)

        if res.status_code == 200:
            data = res.json()
            records = data.get("records", [])
            if len(records) > 0:
                account_id = records[0]["id"]  # ID –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω –∞–∫–∞—É–Ω—Ç
                # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable
                new_data = {"fields": {"–ê–∫–∞—É–Ω—Ç": [account_id]}}
                res_put = requests.patch(f"{url_reports}/{record_id}", headers=headers, json=new_data)
                if res_put.status_code == 200:
                    bot.reply_to(message, "‚úÖ –ê–∫–∞—É–Ω—Ç—ä—Ç –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
                else:
                    bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞.")
            else:
                bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∞–∫–∞—É–Ω—Ç —Å —Ç–æ–≤–∞ –∏–º–µ.")
        else:
            bot.reply_to(message, "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∑–∞–ø–∏—Å –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ.")
        
def get_transaction_types_from_airtable():
            return list(get_transaction_type_options().keys())
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ —Å—ä–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏ –æ—Ç—á–µ—Ç–∏
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text
    user_id = message.chat.id
    user_name = message.from_user.first_name
    current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏ —Ç–æ–≤–∞ —Ç—É–∫
    
    # üìå –ü–™–†–í–û –ø–∞—Ä—Å–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
    amount, currency_code, description, account_name, is_expense = parse_transaction(text)

    if amount is None or currency_code is None or description == "":
        reply_text = ("‚ö†Ô∏è –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ñ–æ—Ä–º–∞—Ç. –ú–æ–ª—è, –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–æ:\n"
                      "`100 –ª–≤. –∑–∞ <–æ–ø–∏—Å–∞–Ω–∏–µ> –æ—Ç <–∞–∫–∞—É–Ω—Ç>`")
        bot.reply_to(message, reply_text, parse_mode="Markdown")
        return

    # üìå 2. –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –∑–∞ –∏–∑–±—Ä–∞–Ω –í–ò–î
    types_list = get_transaction_types_from_airtable()
    if user_id not in user_pending_type or not user_pending_type[user_id].get("selected"):
        # üíæ –ó–∞–ø–∏—Å–≤–∞–º–µ –ø–∞—Ä—Å–Ω–∞—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –∑–∞ –¥–∞ —è –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–ª–µ–¥ –∏–∑–±–æ—Ä–∞
        pending_transaction_data[user_id] = {
            "amount": amount,
            "currency_code": currency_code,
            "description": description,
            "account_name": account_name,
            "is_expense": is_expense,
            "user_name": user_name,
            "datetime": current_datetime,
        }

        send_transaction_type_page(chat_id=user_id, page=0)

    # üìå 3. –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
    account_part = ""
    if re.search(r'\b–æ—Ç\b', text, re.IGNORECASE):
        account_part = re.split(r'\b–æ—Ç\b', text, flags=re.IGNORECASE)[-1].strip()
    elif re.search(r'\bot\b', text, re.IGNORECASE):
        account_part = re.split(r'\bot\b', text, flags=re.IGNORECASE)[-1].strip()

    # –ü–æ—á–∏—Å—Ç–≤–∞–º–µ –∞–∫–∞—É–Ω—Ç–∞ –∏ —Å—ä–∑–¥–∞–≤–∞–º–µ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    normalized_input = re.sub(r"[^\w\s]", " ", account_part).lower()
    keywords = normalized_input.split()

    # –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–∞–º–µ —á–∞—Å—Ç—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–ª–µ—Ç–æ REG
    norm_reg = 'REGEX_REPLACE(LOWER({REG}), "[^0-9a-z ]", " ")'

    # –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ —É—Å–ª–æ–≤–∏–µ –∑–∞ –≤—Å—è–∫–∞ –¥—É–º–∞: SEARCH("–¥—É–º–∞", –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω REG) > 0
    conditions = [f'SEARCH(\"{w}\", {norm_reg}) > 0' for w in keywords]

    # –°–≤—ä—Ä–∑–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —É—Å–ª–æ–≤–∏—è —Å AND(...)
    formula_filter = "AND(" + ", ".join(conditions) + ")"

    # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ Airtable ("–í–°–ò–ß–ö–ò –ê–ö–ê–£–ù–¢–ò") –ø–æ –∫–æ–ª–æ–Ω–∞—Ç–∞ REG —Å —á–∞—Å—Ç–∏—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ
    account_id = None
    if account_name:
        # –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –∏ —Ç—ä—Ä—Å–µ–Ω–∏—è —Ç–µ–∫—Å—Ç
        search_term = clean_string(account_name.strip())

        # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞ –∫—ä–º Airtable API
        params = {"filterByFormula": formula_filter}
        res = requests.get(url_accounts, headers=headers, params=params)

        print(f"Search response: {res.text}")  # –¢–æ–≤–∞ —â–µ –Ω–∏ –ø–æ–∫–∞–∂–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Airtable

        if res.status_code == 200:
            data = res.json()
            records = data.get("records", [])
            if len(records) > 0:
                account_id = records[0]["id"]  # ID –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–ø–∏—Å
                print(f"Account found: {account_id}")
            else:
                print("No account found.")
        else:
            print(f"Error searching account: HTTP {res.status_code} - {res.text}")      

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –Ω–æ–≤–∏—è –∑–∞–ø–∏—Å –≤ "–û—Ç—á–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º"
    fields = {
    "–î–∞—Ç–∞": current_datetime,
    "–û–ø–∏—Å–∞–Ω–∏–µ": description,
}

# ‚úÖ –î–æ–±–∞–≤—è–º–µ "–í–ò–î", –∞–∫–æ –∏–º–∞ –∏–∑–±—Ä–∞–Ω
    if user_id in user_pending_type:
        selected_type = user_pending_type[user_id].get("selected")
        if selected_type:
            fields["–í–ò–î"] = [selected_type]  # ‚úÖ –Ω–µ –∑–∞–±—Ä–∞–≤—è–π —Å–∫–æ–±–∏—Ç–µ []
            del user_pending_type[user_id]


    if currency_code == "BGN":
        fields["–°—É–º–∞ (–ª–≤.)"] = amount
    elif currency_code == "EUR":
        fields["–°—É–º–∞ (EUR)"] = amount
    elif currency_code == "GBP":
        fields["–°—É–º–∞ (GBP)"] = amount

    if account_id:
        fields["–ê–∫–∞—É–Ω—Ç"] = [account_id]  # –ê–∫–æ –∞–∫–∞—É–Ω—Ç—ä—Ç –µ –Ω–∞–º–µ—Ä–µ–Ω, –¥–æ–±–∞–≤—è–º–µ ID –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞
    else:
        # –ê–∫–æ –∞–∫–∞—É–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω, —É–≤–µ–¥–æ–º—è–≤–∞–º–µ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤—è–º–µ –∏–º–µ—Ç–æ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ
        reply_text = f"‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∞–∫–∞—É–Ω—Ç —Å –∏–º–µ: {account_name}. –ó–∞–ø–∏—Å–∞—Ö–º–µ –∞–∫–∞—É–Ω—Ç–∞ –≤ –ø–æ–ª–µ—Ç–æ '–û–ø–∏—Å–∞–Ω–∏–µ'."
        bot.reply_to(message, reply_text)
        fields["–û–ø–∏—Å–∞–Ω–∏–µ"] = f"{description} (–ê–∫–∞—É–Ω—Ç: {account_name})"

    # –î–æ–±–∞–≤—è–º–µ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    fields["–ò–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"] = user_name  # –î–æ–±–∞–≤—è–º–µ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –Ω–æ–≤–æ—Ç–æ –ø–æ–ª–µ
    
    # –ò–∑–ø—Ä–∞—â–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∫—ä–º Airtable
    data = {"fields": fields}
    res_post = requests.post(url_reports, headers=headers, json=data)
    if res_post.status_code in (200, 201):
        record_id = res_post.json().get("id")  # –ü–æ–ª—É—á–∞–≤–∞–º–µ ID –Ω–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å
        # –î–æ–±–∞–≤—è–º–µ –∑–∞–ø–∏—Å –≤ —Å–ø–∏—Å—ä–∫–∞ —Å –≤—Å–∏—á–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        if message.chat.id not in user_records:
            user_records[message.chat.id] = []
        user_records[message.chat.id].append(record_id)
        reply_text = "‚úÖ –û—Ç—á–µ—Ç—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ."
        bot.reply_to(message, reply_text)
    else:
        error_msg = res_post.text
        reply_text = "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ—Ç–æ –Ω–∞ –æ—Ç—á–µ—Ç–∞!"
        bot.reply_to(message, reply_text)
        print(f"Failed to create record: HTTP {res_post.status_code} - {error_msg}")

WEBHOOK_URL = f"{os.getenv('WEBHOOK_BASE_URL')}/bot{TELEGRAM_BOT_TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ webhook-–∞
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

from flask import Flask, request

app = Flask(__name__)

@app.route(f"/bot{TELEGRAM_BOT_TOKEN}", methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

